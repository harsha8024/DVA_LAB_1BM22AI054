#Visual Analysis of Imputation Techniques


Use a dataset with missing values. Apply mean, median and mode imputation to handle the missing data. Then, create pair plots using Seaborn before and after imputation. How do the relationships between features change after each imputation method?

 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


  import pandas as pd
import seaborn
import matplotlib.pyplot as plt

from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler

filepath=("/content/laptopData.csv")
df=pd.read_csv(filepath)
seaborn.pairplot(df)
plt.show()



  filepath=("/content/laptopData.csv")
df=pd.read_csv(filepath)



scaler = MinMaxScaler()


df['Inches'] = pd.to_numeric(df['Inches'], errors='coerce')
df['Inches'].fillna(df['Inches'].mean(), inplace=True)
df['Company'].fillna(df['Company'].mode()[0], inplace=True)
df['Cpu'].fillna(method='bfill', inplace=True)
df['TypeName'].fillna(method='bfill', inplace=True)
df['Weight'] = df['Weight'].replace(r'[^0-9.]+', '', regex=True)

# Step 2: Convert to numeric, coercing errors to NaN
df['Weight'] = pd.to_numeric(df['Weight'], errors='coerce')

# Step 3: Fill NaN values with the mean
df['Weight'].fillna(df['Weight'].mean(), inplace=True)
df['Price'].fillna(df['Price'].median(), inplace=True)
df['OpSys'].fillna(method='bfill', inplace=True)
df['Gpu'].fillna(method='ffill', inplace=True)
df['Memory'].fillna(method='ffill', inplace=True)
df['Ram'].fillna(df['Ram'].mode()[0], inplace=True)
df['ScreenResolution'].fillna(method='ffill', inplace=True)
scaler = MinMaxScaler()
scaler1=StandardScaler()
df[['Price']] = scaler1.fit_transform(df[['Price']])




# Apply Min-Max scaling to selected columns
df[['Weight']] = scaler.fit_transform(df[['Weight']])
print(df.to_string())

seaborn.pairplot(df)
plt.show()



seaborn.boxplot(x=df['Price'])
plt.show()


import seaborn as sns
import matplotlib.pyplot as plt

# Box plot for 'Price' by 'Company' (categorical)
plt.figure(figsize=(10, 6))
sns.boxplot(x='Company', y='Price', data=df)
plt.xticks(rotation=90)  # Rotate company names if needed
plt.title('Box plot of Price by Company')
plt.show()


filepath=("/content/laptopData.csv")
df=pd.read_csv(filepath)



scaler = MinMaxScaler()


df['Inches'] = pd.to_numeric(df['Inches'], errors='coerce')
df['Inches'].fillna(df['Inches'].mean(), inplace=True)
df['Company'].fillna(df['Company'].mode()[0], inplace=True)
df['Cpu'].fillna(method='bfill', inplace=True)
df['TypeName'].fillna(method='bfill', inplace=True)
df['Weight'] = df['Weight'].replace(r'[^0-9.]+', '', regex=True)

# Step 2: Convert to numeric, coercing errors to NaN
df['Weight'] = pd.to_numeric(df['Weight'], errors='coerce')

# Step 3: Fill NaN values with the mean
df['Weight'].fillna(df['Weight'].mean(), inplace=True)
df['Price'].fillna(df['Price'].median(), inplace=True)
df['OpSys'].fillna(method='bfill', inplace=True)
df['Gpu'].fillna(method='ffill', inplace=True)
df['Memory'].fillna(method='ffill', inplace=True)
df['Ram'].fillna(df['Ram'].mode()[0], inplace=True)
df['ScreenResolution'].fillna(method='ffill', inplace=True)
scaler = MinMaxScaler()
scaler1=StandardScaler()
df[['Price']] = scaler1.fit_transform(df[['Price']])




# Apply Min-Max scaling to selected columns
# df[['Weight']] = scaler.fit_transform(df[['Weight']])
# print(df.to_string())

plt.figure(figsize=(10, 6))
sns.boxplot(x='Company', y='Price', data=df)
plt.xticks(rotation=90)  # Rotate company names if needed
plt.title('Box plot of Price by Company')
plt.show()


seaborn.boxplot(x=df['Price'])
plt.show()






  



  
